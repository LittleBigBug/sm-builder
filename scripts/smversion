#!/usr/bin/env python

import argparse
import subprocess


def get_git_revision_short_hash():
    return subprocess.check_output(['git', 'rev-parse', '--short', 'HEAD']).strip()

def main():
    parser = argparse.ArgumentParser(
        description='A sourcemod plugin versioning tool')
    parser.add_argument('path', help='Input version file')
    parser.add_argument('outpath', help='Output version file')
    parser.add_argument('build', help='Build number')
    parser.add_argument('--gitcommit', action='store_true', help='Include git commit hash')
    parser.add_argument('--version_macro', nargs='?', default='PLUGIN_VERSION')
    parser.add_argument('--commit_macro', nargs='?', default='COMMIT_STRING')
    parser.add_argument('--build_number_only', action='store_true')
    args = parser.parse_args()

    # read in our version file
    version_file = args.path
    version_line_string = None
    with open(version_file) as f:
        lines = f.readlines()
        for line in lines:
            line = line.strip()
            version_macro_definition = '#define {}'.format(args.version_macro)
            if version_macro_definition in line:
                version_line_string = line
                break

    if version_line_string is None:
        print('Failed to find version string')
        return

    if args.build_number_only:
        version_line_string = 'Build ' + args.build
    else:
        # get last " in the version string, append build number to it
        index = version_line_string.rfind('\"')
        version_line_string = version_line_string[:index] + '+' + args.build + version_line_string[index:]

    # write out the result version file
    with open(args.outpath, 'w') as f:
        f.write(version_line_string + '\n')

        if args.gitcommit:
            commit_line_string = '#define {} \"{}\"'.format(args.commit_macro, get_git_revision_short_hash())
            f.write(commit_line_string + '\n')


if __name__ == '__main__':
    main()
